# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import srunner.osi.client.ScenarioRunner_pb2 as ScenarioRunner__pb2
from osi3 import osi_trafficcommand_pb2 as osi3_dot_osi__trafficcommand__pb2


class OSIVehicleControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendCommand = channel.unary_unary(
                '/srunner.osi.client.OSIVehicleController/SendCommand',
                request_serializer=osi3_dot_osi__trafficcommand__pb2.TrafficCommand.SerializeToString,
                response_deserializer=ScenarioRunner__pb2.Float.FromString,
                )


class OSIVehicleControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OSIVehicleControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCommand,
                    request_deserializer=osi3_dot_osi__trafficcommand__pb2.TrafficCommand.FromString,
                    response_serializer=ScenarioRunner__pb2.Float.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'srunner.osi.client.OSIVehicleController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OSIVehicleController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=True,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/srunner.osi.client.OSIVehicleController/SendCommand',
            osi3_dot_osi__trafficcommand__pb2.TrafficCommand.SerializeToString,
            ScenarioRunner__pb2.Float.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
